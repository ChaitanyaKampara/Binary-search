Input: nums = [3,4,5,6,1,2], target = 1
Output: 4

Input: nums = [3,5,6,0,1,2], target = 4
Output: -1

# JUST ADDING target > nums[r] AND target > nums[r] TO target > nums[m]: and target < nums[m]: 
# WRITE ELSE FOR EVERYTHING

class Solution:
    def search(self, nums: List[int], target: int) -> int:
        l,r = 0 ,len(nums)-1   # pointers initialization
        while l<=r:           
            m = (l+r)//2
            if target == nums[m]:
                return m                                             # direct answer
            if nums[l]<=nums[m]:
            # nums=[3,4,5,6,1,2] , target=1 , so nums[m] = 5
                if target < nums[l] or target > nums[m]:             # => 1 < 3(ok) or 1 > 5(not ok)
                    l = m+1                                          # l = 4 => 6 1 2 
                else:
                    r=m-1
            else:
                if target > nums[r] or target < nums[m]:
                    r = m-1
                else:
                    l=m+1
        return -1
                
# compare 1st ele with both l,r if l make l = m+1 else r = m-1 
# same as target > nums[m]: and target < nums[m]:
# remember < > , > <
